#!/usr/bin/env bash

# Activate cern conda environment and get kerberos ticket for lxplus access
function cern() {
	kinit -kt ~/keytab stipnis@CERN.CH
	conda activate cern
}

# Usage: pfdmerge output-file input-file-1 ... input-file-n
function mergepdf() { 
	gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile="$1" "${@:2}" 
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Show directory contents when moving into it
function cdls() {
    builtin cd "$@" && la
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbhc
	else
		local arg=-shc
	fi
	
	if [ $# -eq 0 ]; then
		du $arg .[!.]* * | sort -hr
	else
		du $arg -- "$@" | sort -hr	
	fi
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .
	else
		subl "$@"
	fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Print configured shell colors
function colors(){
	IFS=:
	for ls_color in ${LS_COLORS[@]}; do # For all colors
	   	color=${ls_color##*=}
	   	ext=${ls_color%%=*}
	   	echo -en "\E[${color}m${ext}\E[0m " # echo color and extension
	 	echo	
	done
	echo
}

# Print all color combinations
function all_colors(){
	for colour in 3{0..7} 9{0..7}
		do for background in 4{0..7} 10{0..7}
			do for bold in 0 1 2
				do echo -e "$bold;$colour;$background \e[$bold;${colour};${background}mSubdermatoglyphic text\e[00m"
				echo
			done
		done
	done
}

# Prepend dirictory (if it exists) to the PATH variable
function prepend-path() {
  [ -d $1 ] && PATH="$1:$PATH"
}

# Use macOS Preview to open a man page in a more handsome format
function manp() {
  man -t $1 | open -f -a Preview
}

# Do a Matrix movie effect of falling characters
function matrix() {
echo -e "\e[1;40m" ; clear ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) ;sleep 0.05; done|gawk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

function matrix2() {
echo -e "\e[1;40m" ; clear ; characters=$( jot -c 94 33 | tr -d '\n' ) ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) $characters ;sleep 0.05; done|gawk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}


