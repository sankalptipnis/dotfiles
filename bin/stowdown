#!/usr/bin/env bash

shopt -s nullglob

BIN_NAME=$(basename "$0")

function usage {
    echo "Usage:"
    echo "$BIN_NAME [-Dxdr] source_dir target_dir"
    echo
    echo "This utility removes any symlinks from the target directory "
    echo "to files in the source directory."
	echo
    echo "COMMAND LINE OPTIONS:"
	echo
	echo "-D"
	echo "	Removes any symlink in the target directory to the "
	echo "	source directory itself (instead of to files in the source directory)"
	echo
	echo "-x"
    echo "	Broken symlinks in the target directory are removed"
    echo "	before proceeding."
	echo
	echo "-d"
    echo "	The commands are printed out rather than being executed."
    echo
	echo "-r"
    echo "	rm is used instead of trash to delete files"
	echo
    exit 1
}

if [[ "$1" == "help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	usage
fi

DIR="FALSE"
CLEAN="FALSE"
DEBUG="FALSE"
USE_RM="FALSE"

while getopts ':Dxdr' flag; do
  case "${flag}" in
	D) DIR="TRUE";;
	x) CLEAN="TRUE";;
	d) DEBUG="TRUE";;
	r) USE_RM="TRUE";;
  esac
done

shift $((OPTIND -1))

SOURCE_DIR="$1"
TARGET_DIR="$2"

[[ -z "$SOURCE_DIR" ]] && usage
[[ -z "$TARGET_DIR" ]] && usage

SOURCE_DIR_ABS="$(abspath "$SOURCE_DIR")"
TARGET_DIR_ABS="$(abspath "$TARGET_DIR")"

[[ -z "$SOURCE_DIR_ABS" ]] && echo "Source directory is null!" && usage
[[ -z "$TARGET_DIR_ABS" ]] && echo "Target directory is null!" && usage

[[ ! -d "$SOURCE_DIR_ABS" ]] && echo "The source directory does not exist!" && usage

if [[ USE_RM == "TRUE" ]]; then
	DEL_CMD="rm -rfv"
else
	DEL_CMD="trash"
fi

if [[ "$DEBUG" == "TRUE" ]]; then
	echo
	echo "!!!!!!!!!!!!!!!! PERFORMING DRY RUN !!!!!!!!!!!!!!!!"
	echo
fi

function process_file() { 
	
	local SOURCE_FILE_ABS="$1"
	local TARGET_DIR_ABS="$2"
	local DEBUG="$3"

	local FILENAME=$(basename "$SOURCE_FILE_ABS")
	local TARGET_FILE_ABS="$TARGET_DIR_ABS/$FILENAME"

	# file exists in the the target dir and is a symlink
	if [[ -e "$TARGET_FILE_ABS" && -h "$TARGET_FILE_ABS" ]]; then
		# the symlink is the same file as the input file
		if [[ "$TARGET_FILE_ABS" -ef "$SOURCE_FILE_ABS" ]]; then
			
			# make a copy of the contents of the file
			echo "~~~ COMMAND: cp -fLrv $TARGET_FILE_ABS{,.temp}"					
			if [[ "$DEBUG" == "FALSE" ]]; then
				cp -fLrv "$TARGET_FILE_ABS"{,.temp} || ( echo "Failed to create a backup copy!" && exit 1 )		
			fi
			echo
			
			# remove the symlink
			echo "~~~ COMMAND: $DEL_CMD $TARGET_FILE_ABS"
			[[ "$DEBUG" == "FALSE" ]] && eval "$DEL_CMD \"$TARGET_FILE_ABS\""
			echo
			
			# remove any potential backups of the file
			echo "~~~ COMMAND: $DEL_CMD $TARGET_FILE_ABS.bak"
			[[ "$DEBUG" == "FALSE" ]] && eval "$DEL_CMD \"$TARGET_FILE_ABS.bak\""
			echo
			
			# rename the copy from to the original name of the file
			echo "~~~ COMMAND: mv -v $TARGET_FILE_ABS.temp $TARGET_FILE_ABS"
			[[ "$DEBUG" == "FALSE" ]] && mv -v "$TARGET_FILE_ABS".temp "$TARGET_FILE_ABS"
			echo
		fi
	fi
}

if [[ -d "$TARGET_DIR_ABS" ]]; then

	echo
	echo "##############################"
	echo "########## CLEANING ##########"
	echo "##############################"

	if [[ "$CLEAN" == "TRUE" ]]; then
		echo
		echo "TARGET DIRECTORY: $TARGET_DIR_ABS"
		OLDIFS="$IFS"
		IFS=$'\n'
		for FILE in "$TARGET_DIR_ABS"/* "$TARGET_DIR_ABS"/.[^.]*; do
			# source file is a broken link
			if [[ ! -e "$FILE" && -h "$FILE" ]]; then 						
				echo
				echo "------------------------------"
				echo "File: $FILE"
				echo "------------------------------"
				# remove broken link
				echo "~~~ COMMAND: $DEL_CMD $FILE"
				[[ "$DEBUG" == "FALSE" ]] && eval "$DEL_CMD \"$FILE\""		
				echo						 
			fi
		done
		IFS="$OLDIFS"
	fi
	
	echo
	echo "##############################"
	echo "######### UNLINKING ##########"
	echo "##############################"

	echo
	echo "SOURCE DIRECTORY: $SOURCE_DIR_ABS"
	echo "TARGET DIRECTORY: $TARGET_DIR_ABS"
	echo

	if [[ "$DIR" == "FALSE" ]]; then
		OLDIFS="$IFS"
		IFS=$'\n'
		for FILE in "$SOURCE_DIR_ABS"/* "$SOURCE_DIR_ABS"/.[^.]*; do
			
			echo "------------------------------"
			echo "File: $FILE"
			echo "------------------------------"

			process_file "$FILE" "$TARGET_DIR_ABS" "$DEBUG"
		done
		IFS="$OLDIFS"
	else
		process_file "$SOURCE_DIR_ABS" "$TARGET_DIR_ABS" "$DEBUG"
	fi
fi