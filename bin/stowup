#!/usr/bin/env bash

shopt -s nullglob

BIN_NAME=$(basename "$0")

function usage {
    echo ""
    echo "Usage:"
    echo "$BIN_NAME [-c] source_dir target_dir"
    echo ""
    echo "This utility creates symlinks from the target directory to all the"
    echo "files in the source directory."
    echo ""
    echo "If the -c option is specified, all the files from the source"
    echo "directory are copied to the target directory instead."
    echo ""
    echo "If the -x option is specified, broken symlinks from the"
    echo "target directory are removed before proceeding."
    echo ""
    echo "If the -d option is specified, the commands are printed out"
    echo "rather than being executed."
    exit 1
}

if [[ $# -eq 0 ]] || [[ $1 = "help" ]] || [[ $1 = "-h" ]] || [[ $1 = "--help" ]]; then
	usage
fi

COPY="FALSE"
CLEAN="FALSE"
DEBUG="FALSE"

while getopts ':cxd' flag; do
  case "${flag}" in
    c) COPY="TRUE";;
	x) CLEAN="TRUE";;
	d) DEBUG="TRUE";;
    *) echo lolo && usage
  esac
done

shift $((OPTIND -1))

SOURCE_DIR=$1
TARGET_DIR=$2

[[ -z "$SOURCE_DIR" ]] && echo "Source directory not specified!" && usage
[[ -z "$TARGET_DIR" ]] && echo "Target directory not specified!" && usage

[[ "$SOURCE_DIR" == "$TARGET_DIR" ]] && echo "Target directory cannot be the same as the source directory!" && usage

[[ ! -d "$SOURCE_DIR" ]] && echo "The source directory does not exist!" && usage

mkdir -p "$TARGET_DIR"

echo ""
echo "##############################"
echo "########## CLEANING ##########"
echo "##############################"

if [[ $CLEAN == "TRUE" ]]; then
	cd "$TARGET_DIR" || ( echo "Could not cd into the target directory!" && usage )
	echo ""
	echo "TARGET DIRECTORY: $TARGET_DIR"
	echo ""
	for FILE in * .[^.]*; do
		# source file is a broken link
		if [[ ! -e "$TARGET_DIR/$FILE" && -h "$TARGET_DIR/$FILE" ]]; then 						
			echo "------------------------------"
			echo "File: $FILE"
			echo "------------------------------"
			# remove broken link
			echo "~~~ COMMAND: rm -rfv $TARGET_DIR/$FILE"
			[[ $DEBUG == "FALSE" ]] && rm -rfv "$TARGET_DIR/$FILE"		
			echo ""						 
		fi
	done
fi

echo ""
echo "##############################"
echo "##### LINKING / COPYING ######"
echo "##############################"

cd "$SOURCE_DIR" || ( echo "Could not cd into the source directory!" && usage )
echo ""
echo "SOURCE DIRECTORY: $SOURCE_DIR"
echo "TARGET DIRECTORY: $TARGET_DIR"
echo ""
for FILE in * .[^.]*; do
	# file with the same name as the source file DOES NOT exist in the target directory
	echo "------------------------------"
	echo "File: $FILE"
	echo "------------------------------"
	if [[ ! -e "$TARGET_DIR/$FILE" ]]; then
		if [[ $COPY == "FALSE" ]]; then
			# create a symlink
			echo "~~~ COMMAND: ln -sv $SOURCE_DIR/$FILE $TARGET_DIR/$FILE"
			[[ $DEBUG == "FALSE" ]] && ln -sv "$SOURCE_DIR/$FILE" "$TARGET_DIR/$FILE" 			
			echo ""
		else
			# create a copy
			echo "~~~ COMMAND: cp -rfv $SOURCE_DIR/$FILE $TARGET_DIR/$FILE"
			[[ $DEBUG == "FALSE" ]] && cp -rfv "$SOURCE_DIR/$FILE" "$TARGET_DIR/$FILE" 			
			echo "" 
		fi
	# file with the same name as the source file DOES exist in the target directory
	else
		# target file is the same as the source file
		if [[ "$TARGET_DIR/$FILE" -ef "$SOURCE_DIR/$FILE" ]]; then 								
			
			# create a temporary copy of the file
			echo "~~~ COMMAND: cp -fLv $TARGET_DIR/$FILE{,.temp}"					
			if [[ $DEBUG == "FALSE" ]]; then
				cp -fLv "$TARGET_DIR/$FILE"{,.temp} || ( echo "Failed to create a backup" && exit 1 )		
			fi
			echo ""
			
			# target needs to be a symlink but it is a copy
			if [[ $COPY == "FALSE" && ! -h "$TARGET_DIR/$FILE" ]]; then 						
				
				# remove the copy
				echo "~~~ COMMAND: rm -rfv $TARGET_DIR/$FILE"
				[[ $DEBUG == "FALSE" ]] && rm -rfv "$TARGET_DIR/$FILE"	
				echo ""
				
				# create a symlink
				echo "~~~ COMMAND: ln -sv $SOURCE_DIR/$FILE $TARGET_DIR/$FILE"
				[[ $DEBUG == "FALSE" ]] && ln -sv "$SOURCE_DIR/$FILE" "$TARGET_DIR/$FILE"
				echo ""
			
			# target needs to be a copy but it is a symlink
			elif [[ $COPY == "TRUE" && -h "$TARGET_DIR/$FILE" ]]; then 							
				
				# remove the symlink
				echo "~~~ COMMAND: rm -rfv $TARGET_DIR/$FILE"
				[[ $DEBUG == "FALSE" ]] && rm -rfv "$TARGET_DIR/$FILE"
				echo ""

				# create a copy
				echo "~~~ COMMAND: cp -rfv $SOURCE_DIR/$FILE $TARGET_DIR"
				[[ $DEBUG == "FALSE" ]] && cp -rfv "$SOURCE_DIR/$FILE" "$TARGET_DIR"
				echo ""
			fi
			
			# remove the temporary copy of the file
			echo "~~~ COMMAND: rm -rfv $TARGET_DIR/$FILE.temp"
			[[ $DEBUG == "FALSE" ]] && rm -rfv "$TARGET_DIR/$FILE.temp"
			echo ""

		# target file and source file are different
		else 																					
			# back up current source file
			echo "~~~ COMMAND: cp -fLv $TARGET_DIR/$FILE{,.bak}"
			if [[ $DEBUG == "FALSE" ]]; then
				cp -fLv "$TARGET_DIR/$FILE"{,.bak} || ( echo "Failed to create a backup" && exit 1 )
			fi
			echo ""
			
			# remove current source file
			echo "~~~ COMMAND: rm -rfv $TARGET_DIR/$FILE"
			[[ $DEBUG == "FALSE" ]] && rm -rfv "$TARGET_DIR/$FILE" 								
			echo ""
			 					
			if [[ $COPY == "FALSE" ]]; then
				# create a symlink
				echo "~~~ COMMAND: ln -sv $SOURCE_DIR/$FILE $TARGET_DIR/$FILE"
				[[ $DEBUG == "FALSE" ]] && ln -sv "$SOURCE_DIR/$FILE" "$TARGET_DIR/$FILE" 		
				echo ""
			else
				# create a copy
				echo "~~~ COMMAND: cp -rfv $SOURCE_DIR/$FILE $TARGET_DIR"
				[[ $DEBUG == "FALSE" ]] && cp -rfv "$SOURCE_DIR/$FILE" "$TARGET_DIR" 			
				echo ""
			fi
		fi
	fi
done