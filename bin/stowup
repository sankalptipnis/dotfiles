#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
GREEN='\033[0;92m'
YELLOW='\033[0;93m'
RESET='\033[0m'

function usage {
    echo
    echo "USAGE:"
    echo -e "    ${YELLOW}${BIN_NAME}${RESET} [-cDxdr] SOURCE_DIR TARGET_DIR"
    echo
	echo "DESCRIPTION:"
    echo "    This utility creates symlinks in the target directory"
    echo "    pointing to all the files in the source directory."
	echo
	echo "COMMAND LINE OPTIONS:"
	echo -e "    ${YELLOW}-c${RESET}"
    echo "        The files from the source directory are copied to the"
    echo "        target directory (instead instead of being symlinked to)"
    echo
	echo -e "    ${YELLOW}-D${RESET}"
	echo "        A [ symlink pointing to | copy of ] the source directory"
	echo "        is created (instead of the files in the source directory)"
    echo
	echo -e "    ${YELLOW}-x${RESET}"
    echo "        Broken symlinks in the target directory are removed"
    echo "        before proceeding"
	echo
	echo -e "    ${YELLOW}-d${RESET}"
    echo "        The commands are printed out rather than being executed"
    echo
	echo -e "    ${YELLOW}-r${RESET}"
    echo "        rm is used instead of trash to delete files"
    exit 1
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	usage
fi

COPY="FALSE"
DIR="FALSE"
CLEAN="FALSE"
DEBUG="FALSE"
USE_RM="FALSE"

while getopts ':cDxdr' flag; do
  case "${flag}" in
    c) COPY="TRUE";;
	D) DIR="TRUE";;
	x) CLEAN="TRUE";;
	d) DEBUG="TRUE";;
	r) USE_RM="TRUE";;
    *) usage
  esac
done

shift $((OPTIND -1))

SOURCE_DIR="$1"
TARGET_DIR="$2"

[[ -z "${SOURCE_DIR// }" ]] && echo "Source directory not specified!" && usage
[[ -z "${TARGET_DIR// }" ]] && echo "Target directory not specified!" && usage

SOURCE_DIR_ABS="$(abspath "$SOURCE_DIR")"
TARGET_DIR_ABS="$(abspath "$TARGET_DIR")"

[[ -z "${SOURCE_DIR_ABS// }" ]] && echo "Source directory is null!" && usage
[[ -z "${TARGET_DIR_ABS// }" ]] && echo "Target directory is null!" && usage

if [[ "$SOURCE_DIR_ABS" == "$TARGET_DIR_ABS" ]]; then
	echo "Target directory cannot be the same as the source directory!" && usage
fi

[[ ! -d "$SOURCE_DIR_ABS" ]] && echo "The source directory does not exist!" && usage

if [[ "$USE_RM" == "TRUE" ]]; then
	DEL_CMD="rm -rfv"
else
	DEL_CMD="delete"
fi

if [[ "$DEBUG" == "TRUE" ]]; then
	echo -e "${GREEN}"
	echo    "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	echo    "+                               Performing Dry Run                             +"
	echo -e "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++${RESET}"
fi

mkdir -p "$TARGET_DIR_ABS" || ( echo "Unable to create target directory!" && usage )

function process_file() { 
	local SOURCE_FILE_ABS="$1"
	local TARGET_DIR_ABS="$2"
	local COPY="$3"
	local DEBUG="$4"

	local FILENAME=$(basename "$SOURCE_FILE_ABS")
	local TARGET_FILE_ABS="$TARGET_DIR_ABS/$FILENAME"

	# file with the same name as the source file DOES NOT exist in the target directory
	if [[ ! -e "$TARGET_FILE_ABS" ]]; then
		if [[ "$COPY" == "FALSE" ]]; then
			# create a symlink
			CMD="ln -sv \"$SOURCE_FILE_ABS\" \"$TARGET_FILE_ABS\""
			echo "~~~ COMMAND: $CMD"
			[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"			
			echo
		else
			# create a copy
			CMD="cp -fRv \"$SOURCE_FILE_ABS\" \"$TARGET_DIR_ABS\""
			echo "~~~ COMMAND: $CMD"
			[[ "$DEBUG" == "FALSE" ]] && eval "$CMD" 			
			echo 
		fi
	# file with the same name as the source file DOES exist in the target directory
	else
		# target file is the same as the source file
		if [[ "$TARGET_FILE_ABS" -ef "$SOURCE_FILE_ABS" ]]; then 								
			
			# create a temporary copy of the file
			CMD="cp -fLRv \"$TARGET_FILE_ABS\"{,.temp}"
			echo "~~~ COMMAND: $CMD"					
			if [[ "$DEBUG" == "FALSE" ]]; then
				eval "$CMD"  || ( echo "Failed to create a backup!" && exit 1 )		
			fi
			echo

			# target needs to be a symlink but it is a copy
			if [[ "$COPY" == "FALSE" && ! -h "$TARGET_FILE_ABS" ]]; then 						
				
				# remove the copy
				CMD="eval \"$DEL_CMD '$TARGET_FILE_ABS'\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"	
				echo
				
				# create a symlink
				CMD="ln -sv \"$SOURCE_FILE_ABS\" \"$TARGET_FILE_ABS\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"
				echo
			
			# target needs to be a copy but it is a symlink
			elif [[ "$COPY" == "TRUE" && -h "$TARGET_FILE_ABS" ]]; then 							
				
				# remove the symlink
				CMD="eval \"$DEL_CMD '$TARGET_FILE_ABS'\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"
				echo

				# create a copy
				CMD="cp -fRv \"$SOURCE_FILE_ABS\" \"$TARGET_DIR_ABS\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"
				echo
			fi
			
			# remove the temporary copy of the file
			CMD="eval \"$DEL_CMD '$TARGET_FILE_ABS.temp'\""
			echo "~~~ COMMAND: $CMD"
			[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"
			echo

		# target file and source file are different
		else 																					
			# old backup exists
			if [[ -e "$TARGET_FILE_ABS.bak" ]]; then
				# remove old backup
				CMD="eval \"$DEL_CMD '$TARGET_FILE_ABS.bak'\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"
				echo
			fi
			
			# back up current source file
			CMD="cp -fLRv \"$TARGET_FILE_ABS\"{,.bak}"
			echo "~~~ COMMAND: $CMD"
			if [[ "$DEBUG" == "FALSE" ]]; then
				eval "$CMD" || ( echo "Failed to create a backup!" && exit 1 )
			fi
			echo
			
			# remove current source file
			CMD="eval \"$DEL_CMD '$TARGET_FILE_ABS'\""
			echo "~~~ COMMAND: $CMD"
			[[ "$DEBUG" == "FALSE" ]] && eval "$CMD" 								
			echo
								
			if [[ "$COPY" == "FALSE" ]]; then
				# create a symlink
				CMD="ln -sv \"$SOURCE_FILE_ABS\" \"$TARGET_FILE_ABS\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD" 		
				echo
			else
				# create a copy
				CMD="cp -fRv \"$SOURCE_FILE_ABS\" \"$TARGET_DIR_ABS\""
				echo "~~~ COMMAND: $CMD"
				[[ "$DEBUG" == "FALSE" ]] && eval "$CMD" 			
				echo
			fi
		fi
	fi
}

echo
echo "##############################"
echo "#          Cleaning          #"
echo "##############################"

if [[ "$CLEAN" == "TRUE" ]]; then
	echo
	echo "TARGET DIRECTORY: '$TARGET_DIR_ABS'"
	mapfile -d '' -t TARGET_FILES < <(find "$TARGET_DIR_ABS" -maxdepth 1 -mindepth 1 -print0)
	for FILE in "${TARGET_FILES[@]}"; do
		# source file is a broken link
		if [[ ! -e "$FILE" && -h "$FILE" ]]; then 						
			echo
			echo "------------------------------------------------------"
			echo "File: '$FILE'"
			echo "------------------------------------------------------"
			# remove broken link
			CMD="eval \"$DEL_CMD '$FILE'\""
			echo "~~~ COMMAND: $CMD"
			[[ "$DEBUG" == "FALSE" ]] && eval "$CMD"		
			echo						 
		fi
	done
fi

echo
echo "##############################"
echo "#     Linking / Copying      #"
echo "##############################"

echo
echo "SOURCE DIRECTORY: '$SOURCE_DIR_ABS'"
echo "TARGET DIRECTORY: '$TARGET_DIR_ABS'"
echo

# linking to / copying files in the source directory
if [[ "$DIR" == "FALSE" ]]; then
	mapfile -d '' -t SOURCE_FILES < <(find "$SOURCE_DIR_ABS" -maxdepth 1 -mindepth 1 -print0)
	for FILE in "${SOURCE_FILES[@]}"; do
		
		echo "-------------------------------------------------------------------"
		echo "File: '$FILE'"
		echo "-------------------------------------------------------------------"

		process_file "$FILE" "$TARGET_DIR_ABS" "$COPY" "$DEBUG"
	done
else
	process_file "$SOURCE_DIR_ABS" "$TARGET_DIR_ABS" "$COPY" "$DEBUG"
fi