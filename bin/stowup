#!/usr/bin/env bash

shopt -s nullglob

BIN_NAME=$(basename "$0")

function usage {
    echo
    echo "Usage:"
    echo "$BIN_NAME [-cDxd] source_dir target_dir"
    echo
    echo "This utility creates symlinks in the target directory"
    echo "pointing to all the files in the source directory."
	echo
	echo "COMMAND LINE OPTIONS:"
	echo
	echo "-c"
    echo "	The files from the source directory are copied to the"
    echo "	target directory (instead instead of being symlinked to)."
    echo
	echo "-D"
	echo "	A [ symlink pointing to | copy of ] the source directory"
	echo "	is created (instead of the files in the source directory)"
    echo
	echo "-x"
    echo "	Broken symlinks in the target directory are removed"
    echo "	before proceeding."
	echo
	echo "-d"
    echo "	The commands are printed out rather than being executed."
    echo
    exit 1
}

if [[ $# -eq 0 ]] || [[ "$1" = "help" ]] || [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
	usage
fi

COPY="FALSE"
DIR="FALSE"
CLEAN="FALSE"
DEBUG="FALSE"

while getopts ':cDxd' flag; do
  case "${flag}" in
    c) COPY="TRUE";;
	D) DIR="TRUE";;
	x) CLEAN="TRUE";;
	d) DEBUG="TRUE";;
    *) usage
  esac
done

shift $((OPTIND -1))

SOURCE_DIR="$1"
TARGET_DIR="$2"

[[ -z "$SOURCE_DIR" ]] && echo "Source directory not specified!" && usage
[[ -z "$TARGET_DIR" ]] && echo "Target directory not specified!" && usage

SOURCE_DIR_ABS=$(python -c "import os,sys; print(os.path.realpath(sys.argv[1]))" "$SOURCE_DIR")
TARGET_DIR_ABS=$(python -c "import os,sys; print(os.path.realpath(sys.argv[1]))" "$TARGET_DIR")

[[ -z "$SOURCE_DIR_ABS" ]] && echo "Source directory is null!" && usage
[[ -z "$TARGET_DIR_ABS" ]] && echo "Target directory is null!" && usage

[[ "$SOURCE_DIR_ABS" == "$TARGET_DIR_ABS" ]] && \
echo "Target directory cannot be the same as the source directory!" && \
usage

[[ ! -d "$SOURCE_DIR_ABS" ]] && echo "The source directory does not exist!" && usage

if [[ "$DEBUG" == "TRUE" ]]; then
	echo
	echo "!!!!!!!!!!!!!!!! PERFORMING DRY RUN !!!!!!!!!!!!!!!!"
	echo
fi

mkdir -p "$TARGET_DIR_ABS" || ( echo "Unable to create target directory!" && usage )

function process_file() { 
	local SOURCE_FILE_ABS="$1"
	local TARGET_DIR_ABS="$2"
	local COPY="$3"
	local DEBUG="$4"

	local FILENAME=$(basename "$SOURCE_FILE_ABS")
	local TARGET_FILE_ABS="$TARGET_DIR_ABS/$FILENAME"

	# file with the same name as the source file DOES NOT exist in the target directory
	if [[ ! -e "$TARGET_FILE_ABS" ]]; then
		if [[ "$COPY" == "FALSE" ]]; then
			# create a symlink
			echo "~~~ COMMAND: ln -sv $SOURCE_FILE_ABS $TARGET_FILE_ABS"
			[[ "$DEBUG" == "FALSE" ]] && ln -sv "$SOURCE_FILE_ABS" "$TARGET_FILE_ABS" 			
			echo
		else
			# create a copy
			echo "~~~ COMMAND: cp -rfv $SOURCE_FILE_ABS $TARGET_DIR_ABS"
			[[ "$DEBUG" == "FALSE" ]] && cp -rfv "$SOURCE_FILE_ABS" "$TARGET_DIR_ABS" 			
			echo 
		fi
	# file with the same name as the source file DOES exist in the target directory
	else
		# target file is the same as the source file
		if [[ "$TARGET_FILE_ABS" -ef "$SOURCE_FILE_ABS" ]]; then 								
			
			# create a temporary copy of the file
			echo "~~~ COMMAND: cp -fLrv $TARGET_FILE_ABS{,.temp}"					
			if [[ "$DEBUG" == "FALSE" ]]; then
				cp -fLrv "$TARGET_FILE_ABS"{,.temp} || ( echo "Failed to create a backup!" && exit 1 )		
			fi
			echo
			
			# target needs to be a symlink but it is a copy
			if [[ "$COPY" == "FALSE" && ! -h "$TARGET_FILE_ABS" ]]; then 						
				
				# remove the copy
				echo "~~~ COMMAND: rm -rfv $TARGET_FILE_ABS"
				[[ "$DEBUG" == "FALSE" ]] && rm -rfv "$TARGET_FILE_ABS"	
				echo
				
				# create a symlink
				echo "~~~ COMMAND: ln -sv $SOURCE_FILE_ABS $TARGET_FILE_ABS"
				[[ "$DEBUG" == "FALSE" ]] && ln -sv "$SOURCE_FILE_ABS" "$TARGET_FILE_ABS"
				echo
			
			# target needs to be a copy but it is a symlink
			elif [[ "$COPY" == "TRUE" && -h "$TARGET_FILE_ABS" ]]; then 							
				
				# remove the symlink
				echo "~~~ COMMAND: rm -rfv $TARGET_FILE_ABS"
				[[ "$DEBUG" == "FALSE" ]] && rm -rfv "$TARGET_FILE_ABS"
				echo

				# create a copy
				echo "~~~ COMMAND: cp -rfv $SOURCE_FILE_ABS $TARGET_DIR_ABS"
				[[ "$DEBUG" == "FALSE" ]] && cp -rfv "$SOURCE_FILE_ABS" "$TARGET_DIR_ABS"
				echo
			fi
			
			# remove the temporary copy of the file
			echo "~~~ COMMAND: rm -rfv $TARGET_FILE_ABS.temp"
			[[ "$DEBUG" == "FALSE" ]] && rm -rfv "$TARGET_FILE_ABS.temp"
			echo

		# target file and source file are different
		else 																					
			# old backup exists
			if [[ -e "$TARGET_FILE_ABS.bak" ]]; then
				# remove old backup
				echo "~~~ COMMAND: rm -rfv $TARGET_FILE_ABS.bak"
				[[ "$DEBUG" == "FALSE" ]] && rm -rfv "$TARGET_FILE_ABS.bak"
				echo
			fi
			
			# back up current source file
			echo "~~~ COMMAND: cp -fLv $TARGET_FILE_ABS{,.bak}"
			if [[ "$DEBUG" == "FALSE" ]]; then
				cp -fLrv "$TARGET_FILE_ABS"{,.bak} || ( echo "Failed to create a backup!" && exit 1 )
			fi
			echo
			
			# remove current source file
			echo "~~~ COMMAND: rm -rfv $TARGET_FILE_ABS"
			[[ "$DEBUG" == "FALSE" ]] && rm -rfv "$TARGET_FILE_ABS" 								
			echo
								
			if [[ "$COPY" == "FALSE" ]]; then
				# create a symlink
				echo "~~~ COMMAND: ln -sv $SOURCE_FILE_ABS $TARGET_FILE_ABS"
				[[ "$DEBUG" == "FALSE" ]] && ln -sv "$SOURCE_FILE_ABS" "$TARGET_FILE_ABS" 		
				echo
			else
				# create a copy
				echo "~~~ COMMAND: cp -rfv $SOURCE_FILE_ABS $TARGET_DIR_ABS"
				[[ "$DEBUG" == "FALSE" ]] && cp -rfv "$SOURCE_FILE_ABS" "$TARGET_DIR_ABS" 			
				echo
			fi
		fi
	fi
}

echo
echo "##############################"
echo "########## CLEANING ##########"
echo "##############################"

if [[ "$CLEAN" == "TRUE" ]]; then
	echo
	echo "TARGET DIRECTORY: $TARGET_DIR"
	for FILE in "$TARGET_DIR"/* "$TARGET_DIR"/.[^.]*; do
		# source file is a broken link
		if [[ ! -e "$FILE" && -h "$FILE" ]]; then 						
			echo
			echo "------------------------------"
			echo "File: $FILE"
			echo "------------------------------"
			# remove broken link
			echo "~~~ COMMAND: rm -rfv $FILE"
			[[ "$DEBUG" == "FALSE" ]] && rm -rfv "$FILE"		
			echo						 
		fi
	done
fi

echo
echo "##############################"
echo "##### LINKING / COPYING ######"
echo "##############################"

echo
echo "SOURCE DIRECTORY: $SOURCE_DIR_ABS"
echo "TARGET DIRECTORY: $TARGET_DIR_ABS"
echo

# linking to / copying files in the source directory
if [[ "$DIR" == "FALSE" ]]; then
	OLDIFS="$IFS"
	IFS=$'\n'
	for FILE in "$SOURCE_DIR_ABS"/* "$SOURCE_DIR_ABS"/.[^.]*; do
		
		echo "------------------------------"
		echo "File: $FILE"
		echo "------------------------------"

		process_file "$FILE" "$TARGET_DIR_ABS" "$COPY" "$DEBUG"
	done
	IFS="$OLDIFS"
else
	process_file "$SOURCE_DIR_ABS" "$TARGET_DIR_ABS" "$COPY" "$DEBUG"
fi