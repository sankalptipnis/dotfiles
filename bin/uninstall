#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
RED='\033[1;91m'
GREEN='\033[1;92m'
YELLOW='\033[0;93m'
RESET='\033[0m'

function usage {
    echo
	echo "USAGE:"
    echo -e "    ${YELLOW}${BIN_NAME}${RESET} /path/to/APP"
    echo
    echo "DESCRIPTION:"
	echo "    Utility to perform a deep uninstall of an app."
	echo
    exit 1
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then usage; fi

APP="$1"
[[ -z "${APP// }" ]] && echo -e "${RED}No app specified!${RESET}" && usage
[[ ! -e "$APP" ]] && echo -e "${RED}${APP}: No such app${RESET}" && usage
APP_NAME="$(basename "$APP" .app)"

echo
echo -e "App Name: $APP_NAME"
echo -e "App Path: $APP"

if ! BUNDLE_ID=$(osascript -e "id of app \"$APP_NAME\""); then
    echo -e "${RED}Bundle ID of app \"${APP_NAME}\" not found!${RESET}"
    exit 1
fi

echo -e "App Bundle ID: $BUNDLE_ID"
echo

echo "Checking for running processes..."
mapfile -t PROCESSES < <(pgrep -afil "$APP_NAME" | grep -v "$BIN_NAME")

DIALOG_ARGS=()
for item in "${PROCESSES[@]}"; do
    DIALOG_ARGS+=("$item" "" "on")
done

PROCESSES_TO_KILL=$(dialog --keep-tite --separate-output --checklist "Choose processes to kill:" 50 150 10 "${DIALOG_ARGS[@]}" 3>&1 1>&2 2>&3)

mapfile -t PROCESSES_TO_KILL <<< "$PROCESSES_TO_KILL"

if [[ -z "${PROCESSES_TO_KILL}" ]]; then
    echo -e "${RED}No processes selected for killing!${RESET}"
else
    printf "%s\n" "${PROCESSES_TO_KILL[@]}"
    echo -e "\n${RED}Kill the above running processes (y or n)?${RESET}"
    read -r ANSWER
    if [[ "$ANSWER" == "y" ]]; then
        echo -e "\nKilling the above running processesâ€¦"
        for PROCESS in "${PROCESSES_TO_KILL[@]}"; do
            PID="$(echo "$PROCESS" | awk '{print $1}')"
            if ps -p "$PID" > /dev/null; then
                if sudo kill "$PID"; then
                    echo -e "${GREEN}${PID}: Successfully killed process${RESET}"
                else
                    echo -e "${RED}${PID}: Failed to kill process${RESET}"   
                fi
            else
                echo -e "${RED}${PID}: No such running process${RESET}"     
            fi
        done
    fi
fi

echo -e "\n${RED}Be case sensitive when searching for files (y or n)?${RESET}"
read -r CASE

if [[ "$CASE" == "y" ]]; then
    FIND_ARG=name
elif
    FIND_ARG=iname
fi

echo
echo "Finding app data..."

LOCATIONS=(
  "$HOME/Library"
  "$HOME/Library/Application Scripts"
  "$HOME/Library/Application Support"
  "$HOME/Library/Application Support/CrashReporter"
  "$HOME/Library/Application Support/CloudDocs/session/containers"
  "$HOME/Library/Application Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.ApplicationRecentDocuments"
  "$HOME/Library/Containers"
  "$HOME/Library/Caches"
  "$HOME/Library/Caches/com.apple.helpd/Generated"
  "$HOME/Library/Caches/com.plausiblelabs.crashreporter.data"
  "$HOME/Library/Caches/SentryCrash"
  "$HOME/Library/HTTPStorages"
  "$HOME/Library/Group Containers"
  "$HOME/Library/Internet Plug-Ins"
  "$HOME/Library/LaunchAgents"
  "$HOME/Library/Logs"
  "$HOME/Library/Preferences"
  "$HOME/Library/Preferences/ByHost"
  "$HOME/Library/Saved Application State"
  "$HOME/Library/WebKit"
  "/Users/Shared"
  "/Library"
  "/Library/Application Support"
  "/Library/Application Support/CrashReporter"
  "/Library/Caches"
  "/Library/Extensions"
  "/Library/Internet Plug-Ins"
  "/Library/LaunchAgents"
  "/Library/LaunchDaemons"
  "/Library/Logs"
  "/Library/Preferences"
  "/Library/PrivilegedHelperTools"
  "/private/var/db/receipts"
  "/usr/local/bin"
  "/usr/local/etc"
  "/usr/local/opt"
  "/usr/local/sbin"
  "/usr/local/share"
  "/usr/local/var"
  "$(getconf DARWIN_USER_CACHE_DIR | sed "s/\/$//")"
  "$(getconf DARWIN_USER_TEMP_DIR | sed "s/\/$//")"
)

FILES=("$APP")

for LOCATION in "${LOCATIONS[@]}"; do
    mapfile -t -O "${#FILES[@]}" FILES < \
    <(find "$LOCATION" -maxdepth 5 -"$FIND_ARG" "*$APP_NAME*" -prune 2>&1 | \
    grep -v "No such file or directory" | \
    grep -v "Operation not permitted" | \
    grep -v "Interrupted system call" | \
    grep -v "Permission denied")
    
    mapfile -t -O "${#FILES[@]}" FILES < \
    <(find "$LOCATION" -maxdepth 5 -"$FIND_ARG" "*$BUNDLE_ID*" -prune 2>&1 | \
    grep -v "No such file or directory" | \
    grep -v "Operation not permitted" | \
    grep -v "Interrupted system call" | \
    grep -v "Permission denied")
done

mapfile -t FILES < <(printf "%s\n" "${FILES[@]}" | sort -ru)

DIALOG_ARGS=()
for item in "${FILES[@]}"; do
    DIALOG_ARGS+=("$item" "" "on")
done

FILES_TO_TRASH=$(dialog --keep-tite --separate-output --checklist "Choose files to delete:" 50 150 10 "${DIALOG_ARGS[@]}" 3>&1 1>&2 2>&3)

[[ -z "${FILES_TO_TRASH}" ]] && echo -e "${RED}No files selected for deletion!${RESET}" && exit 1

mapfile -t FILES_TO_TRASH <<< "$FILES_TO_TRASH"

printf ''"'%s'"'\n' "${FILES_TO_TRASH[@]}"

echo -e "\n${RED}Move the above app data to trash (y or n)?${RESET}"
read -r ANSWER
if [[ "$ANSWER" == "y" ]]; then
    echo -e "\nMoving the above app data to trash..."
    for FILE_TO_TRASH in "${FILES_TO_TRASH[@]}"; do
        if [[ -e "${FILE_TO_TRASH}" ]]; then
            POSIX_FILE=$(printf "POSIX file \"%s\"" "${FILE_TO_TRASH}")
            if ! osascript -e "tell application \"Finder\" to delete { ${POSIX_FILE} }" > /dev/null; then
                echo -e "${RED}Failed to delete ${FILE_TO_TRASH}${RESET}"
            else
                echo -e "${GREEN}Successfully deleted ${FILE_TO_TRASH}${RESET}"    
            fi
        fi
    done
fi

echo

echo -e "\n${RED}Run the homebrew uninstall process (y or n)?${RESET}"
read -r ANSWER
if [[ "$ANSWER" == "y" ]]; then
    echo -e "\nEnter the Homebrew Cask name:"
    read -r CASK
    if ! brew uninstall --zap --cask --force "${CASK}"; then
        echo -e "${RED}Failed to run the brew uninstall process for cask ${CASK}${RESET}"
        exit 1
    else
        echo -e "${GREEN}Successfully ran the brew uninstall process for cask ${CASK}"    
    fi
fi